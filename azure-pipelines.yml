# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- azure-pipelines

pool:
  vmImage: ubuntu-latest

steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'
- task: AzureCLI@2
  displayName: Azure CLI
  inputs:
    addSpnToEnvironment: true
    azureSubscription: ServConnectionName
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      az --version
      az account show

- script: cd infra
  displayName: 'Move to infra dir'

# - task: CmdLine@2
#   inputs:
#     script: |
#       terraform --version
#             # export ARM_CLIENT_ID=$(TF_VAR_SP_CLIENT_ID)
#             # export ARM_CLIENT_SECRET=$(TF_VAR_SP_CLIENT_SECRET)
#             # export ARM_TENANT_ID=$(TF_VAR_SP_TENANT_ID)
#             # export ARM_SUBSCRIPTION_ID=$(TF_VAR_SUBSCRIPTION_ID)
#       $env:ARM_SUBSCRIPTION_ID=$(TF_VAR_SUBSCRIPTION_ID)
#       $env:ARM_TENANT_ID=$(TENANT_ID)
#       az login -t $env:ARM_TENANT_ID
#       az account set --subscription $env:ARM_SUBSCRIPTION_ID
- task: AzureCLI@2
  displayName: 'Terraform init'
  inputs:
    azureSubscription: '$(subscriptionConnection)'
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      # Propagate pipeline Service Principal as Terraform variables
      $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
      $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
      $env:ARM_TENANT_ID       ??= $env:tenantId
      # Propagate from Azure CLI context
      $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
      $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)              
      # Put Terraform commands after this line
    addSpnToEnvironment: true
    useGlobalConfig: true
    failOnStandardError: true
    powerShellIgnoreLASTEXITCODE: false
    workingDirectory: '$(terraformDirectory)'


# - script: terraform init -backend-config=backend.tfconfig
#   workingDirectory: infra
#   displayName: 'Tf init'
